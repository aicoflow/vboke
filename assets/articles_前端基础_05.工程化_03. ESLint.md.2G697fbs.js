import{_ as i,c as a,o as e,aM as t}from"./chunks/framework.ldyE1wya.js";const c=JSON.parse('{"title":"ESLint","description":"","frontmatter":{},"headers":[],"relativePath":"articles/前端基础/05.工程化/03. ESLint.md","filePath":"articles/前端基础/05.工程化/03. ESLint.md"}'),n={name:"articles/前端基础/05.工程化/03. ESLint.md"};function l(p,s,h,r,o,d){return e(),a("div",null,s[0]||(s[0]=[t(`<h1 id="eslint" tabindex="-1">ESLint <a class="header-anchor" href="#eslint" aria-label="Permalink to &quot;ESLint&quot;">​</a></h1><blockquote><p>ESLint官网：<a href="https://eslint.org/" target="_blank" rel="noreferrer">https://eslint.org/</a></p><p>ESLint民间中文网：<a href="https://eslint.bootcss.com/" target="_blank" rel="noreferrer">https://eslint.bootcss.com/</a></p></blockquote><h1 id="eslint的由来" tabindex="-1">ESLint的由来 <a class="header-anchor" href="#eslint的由来" aria-label="Permalink to &quot;ESLint的由来&quot;">​</a></h1><p>JavaScript是一个过于灵活的语言，因此在企业开发中，往往会遇到下面两个问题：</p><ul><li><p>如何让所有员工书写高质量的代码？</p><p>比如使用<code>===</code>替代<code>==</code></p></li><li><p>如何让所有员工书写的代码风格保持统一？</p><p>比如字符串统一使用单引号</p></li></ul><p>上面两个问题，一个代表着代码的质量，一个代表着代码的风格。</p><p>如果纯依靠人工进行检查，不仅费时费力，而且还容易出错。</p><p>ESLint由此诞生，它是一个工具，<strong>预先配置好各种规则</strong>，通过这些规则来自动化的验证代码，甚至自动修复</p><img src="http://mdrs.yuanjin.tech/img/20211103145845.png" alt="image-20211103145844948" style="zoom:50%;"><h1 id="eslint的基本使用" tabindex="-1">ESLint的基本使用 <a class="header-anchor" href="#eslint的基本使用" aria-label="Permalink to &quot;ESLint的基本使用&quot;">​</a></h1><h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h2><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> eslint</span></span></code></pre></div><h2 id="如何验证" tabindex="-1">如何验证 <a class="header-anchor" href="#如何验证" aria-label="Permalink to &quot;如何验证&quot;">​</a></h2><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 验证单个文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> eslint</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 文件名</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 验证全部文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> eslint</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> src/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">**</span></span></code></pre></div><h2 id="配置规则" tabindex="-1">配置规则 <a class="header-anchor" href="#配置规则" aria-label="Permalink to &quot;配置规则&quot;">​</a></h2><p>eslint会自动寻找根目录中的配置文件，它支持三种配置文件：</p><ul><li><code>.eslintrc</code> JSON格式</li><li><code>.eslintrc.js</code> JS格式</li><li><code>.eslintrc.yml</code> YAML格式</li></ul><p>这里以<code>.eslintrc.js</code>为例：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ESLint 配置</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 配置规则</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  rules: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    规则名1: 级别,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    规则名2: 级别,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>每条规则由名称和级别组成</p><p><strong>规则名称决定了要检查什么</strong></p><p><strong>规则级别决定了检查没通过时的处理方式</strong></p><p>所有的规则名称看这里：</p><ul><li>官方：<a href="https://eslint.org/docs/rules/" target="_blank" rel="noreferrer">https://eslint.org/docs/rules/</a></li><li>中文：<a href="https://eslint.bootcss.com/docs/rules/" target="_blank" rel="noreferrer">https://eslint.bootcss.com/docs/rules/</a></li></ul><p>所有级别如下：</p><ul><li>0 或 &#39;off&#39;：关闭规则</li><li>1 或 &#39;warn&#39;：验证不通过提出警告</li><li>2 或 &#39;error&#39;：验证不通过报错，退出程序</li></ul><h2 id="在vscode中及时发现问题" tabindex="-1">在VSCode中及时发现问题 <a class="header-anchor" href="#在vscode中及时发现问题" aria-label="Permalink to &quot;在VSCode中及时发现问题&quot;">​</a></h2><p>每次都要输入命令发现问题非常麻烦</p><p>可以安装VSCode插件<strong>ESLint</strong>，只要项目的node_modules中有eslint，它就会按照项目根目录下的规则自动检测</p><h2 id="使用继承" tabindex="-1">使用继承 <a class="header-anchor" href="#使用继承" aria-label="Permalink to &quot;使用继承&quot;">​</a></h2><p>ESLint的规则非常庞大，全部自定义过于麻烦</p><p>一般我们继承其他企业开源的方案来简化配置</p><p>这方面做的比较好的是一家叫Airbnb的公司，他们在开发前端项目的时候自定义了一套开源规则，受到全世界的认可</p><p>我们只需要安装它即可</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 为了避免版本问题，不要直接安装eslint，直接安装下面的包，会自动安装相应版本的eslint</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> eslint-config-airbnb</span></span></code></pre></div><p>然后稍作配置</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">module.exports</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	extends:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;airbnb&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 配置继承自 airbnb</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="在框架中使用" tabindex="-1">在框架中使用 <a class="header-anchor" href="#在框架中使用" aria-label="Permalink to &quot;在框架中使用&quot;">​</a></h2><p>一般我们使用脚手架搭建工程，在搭建工程时通常都可以直接设置eslint</p><h1 id="企业开发的实际情况" tabindex="-1">企业开发的实际情况 <a class="header-anchor" href="#企业开发的实际情况" aria-label="Permalink to &quot;企业开发的实际情况&quot;">​</a></h1><img src="http://mdrs.yuanjin.tech/img/20211103163608.png" alt="image-20211103163608481" style="zoom:50%;"><p>我们要做什么？</p><ul><li>安装好VSCode的ESLint插件</li><li>学会查看ESLint错误提示</li></ul>`,43)]))}const g=i(n,[["render",l]]);export{c as __pageData,g as default};
