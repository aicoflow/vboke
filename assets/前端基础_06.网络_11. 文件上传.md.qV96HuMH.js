import{_ as a,c as i,o as n,aM as t}from"./chunks/framework.ldyE1wya.js";const g=JSON.parse('{"title":"文件上传的消息格式","description":"","frontmatter":{},"headers":[],"relativePath":"前端基础/06.网络/11. 文件上传.md","filePath":"前端基础/06.网络/11. 文件上传.md"}'),p={name:"前端基础/06.网络/11. 文件上传.md"};function l(e,s,h,k,r,d){return n(),i("div",null,s[0]||(s[0]=[t(`<h1 id="文件上传的消息格式" tabindex="-1">文件上传的消息格式 <a class="header-anchor" href="#文件上传的消息格式" aria-label="Permalink to &quot;文件上传的消息格式&quot;">​</a></h1><p>文件上传的本质仍然是一个数据提交，无非就是数据量大一些而已</p><p>在实践中，人们逐渐的形成了一种共识，我们自行规定，文件上传默认使用下面的请求格式</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>POST 上传地址 HTTP/1.1</span></span>
<span class="line"><span>其他请求头</span></span>
<span class="line"><span>Content-Type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW</span></span>
<span class="line"><span></span></span>
<span class="line"><span>----WebKitFormBoundary7MA4YWxkTrZu0gW</span></span>
<span class="line"><span>Content-Disposition: form-data; name=&quot;avatar&quot;; filename=&quot;小仙女.jpg&quot;</span></span>
<span class="line"><span>Content-Type: image/jpeg</span></span>
<span class="line"><span></span></span>
<span class="line"><span>(文件二进制数据)</span></span>
<span class="line"><span>----WebKitFormBoundary7MA4YWxkTrZu0gW</span></span>
<span class="line"><span>Content-Disposition: form-data; name=&quot;username&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>admin</span></span>
<span class="line"><span>----WebKitFormBoundary7MA4YWxkTrZu0gW</span></span>
<span class="line"><span>Content-Disposition: form-data; name=&quot;password&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>123123</span></span>
<span class="line"><span>----WebKitFormBoundary7MA4YWxkTrZu0gW</span></span></code></pre></div><ul><li>除非接口文档特别说明，文件上传一般使用POST请求</li><li>接口文档中会规定上传地址，一般一个站点会有一个统一的上传地址</li><li>除非接口文档特别说明，<code>content-type: multipart/form-data</code>，浏览器会自动分配一个定界符<code>boundary</code></li><li>请求体的格式是一个被定界符<code>boundary</code>分割的消息，每个分割区域本质就是一个键值对</li><li>除了键值对外，<code>multipart/form-data</code>允许添加其他额外信息，比如文件数据区域，一般会把文件在本地的名称和文件MIME类型告诉服务器</li></ul><h1 id="文件上传的实现" tabindex="-1">文件上传的实现 <a class="header-anchor" href="#文件上传的实现" aria-label="Permalink to &quot;文件上传的实现&quot;">​</a></h1><p>在现代的网页交互中，带表单的文件上传通常使用下面的方式实现</p><p><img src="http://mdrs.yuanjin.tech/img/20210917132919.png" alt="文件上传逻辑"></p><blockquote><p>后端开发服务器：<a href="http://localhost:8000" target="_blank" rel="noreferrer">http://localhost:8000</a></p></blockquote><h1 id="接口示例" tabindex="-1">接口示例 <a class="header-anchor" href="#接口示例" aria-label="Permalink to &quot;接口示例&quot;">​</a></h1><h2 id="统一上传接口" tabindex="-1">统一上传接口 <a class="header-anchor" href="#统一上传接口" aria-label="Permalink to &quot;统一上传接口&quot;">​</a></h2><p><strong>请求路径</strong>：/api/upload</p><p><strong>请求方法</strong>：POST</p><p><strong>字段名</strong>：file</p><p><strong>尺寸限制</strong>：1M</p><p><strong>支持的文件后缀</strong>：.jpg, .jpeg, .gif, .png, .bmp, .webp</p><p><strong>上传成功的响应</strong>：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	code</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  msg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://localhost:8000/upload/a32d18.jpg&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 访问路径</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>可能发生的失败响应</strong>：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	code</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">403</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	msg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;文件超过了限制&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	code</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">403</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	msg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;无效的文件类型&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="用户注册接口" tabindex="-1">用户注册接口 <a class="header-anchor" href="#用户注册接口" aria-label="Permalink to &quot;用户注册接口&quot;">​</a></h2><p><strong>请求路径</strong>：/api/user/reg</p><p><strong>请求方法</strong>：POST</p><p><strong>支持消息类型</strong>：</p><ol><li>x-www-form-urlencoded</li><li>json</li></ol><p><strong>字段</strong>：</p><table tabindex="0"><thead><tr><th>字段名</th><th>含义</th><th>是否必须</th></tr></thead><tbody><tr><td>username</td><td>账号</td><td>是</td></tr><tr><td>password</td><td>密码</td><td>是</td></tr><tr><td>avatar</td><td>头像</td><td>是</td></tr><tr><td></td><td></td><td></td></tr></tbody></table><p><strong>注册成功的响应</strong>：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	code</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  msg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    username</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;monica&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    avatar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://localhost:8000/upload/a234wq1.jpg&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,30)]))}const E=a(p,[["render",l]]);export{g as __pageData,E as default};
